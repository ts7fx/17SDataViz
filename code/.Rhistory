trip <- trip[!is.na(trip$tip_percent),]
sum(is.na(trip$tip_percent)) # 4172 missing values. Guessing the problem is when this is calculated, some of the records had Total_amount = 0.
lm.test <- lm(tip_percent~., data = trip)
is.factor(trip)
is.factor(trip[,1:ncol(trip)])
trip[,1:ncol(trip)]
is.factor(trip$VendorID)
is.factor(trip$lpep_pickup_datetime
)
colnames(trip)
lm.test <- lm(tip_percent~. -lpep_pickup_datetime -Lpep_dropoff_datetime, data = trip)
is.factor(trip$lpep_pickup_datetime
)
is.factor(trip$Store_and_fwd_flag)
is.factor(trip$RateCodeID)
is.factor(trip$Pickup_latitude)
trip_lean <- trip # create another copy just in case
trip$tip_percent <- trip$Tip_amount / trip$Total_amount
trip_lean <- trip # create another copy just in case
# check to see which columns have missing values
colnames(trip_lean)[colSums(is.na(trip_lean)) > 0]
# "Ehail_fee"   "Trip_type"   "tip_percent"
sum(is.na(trip_lean$Ehail_fee)) # 1494926 missing values, 100% missing. Drop this column.
sum(is.na(trip_lean$Trip_type)) # 4 missing values
sum(is.na(trip_lean$tip_percent)) # 4172 missing values. Guessing the problem is when this is calculated, some of the records had Total_amount = 0.
trip_lean[is.na(trip_lean$Trip_type),] # many fields were missing for the records with the 4 missing values for Trip_type. Drop these observations.
trip_lean <- trip_lean[!is.na(trip_lean$Trip_type),]
sum(trip_lean[is.na(trip_lean$tip_percent), "Total_amount"]) # Total_amount sum to zero for all trips with tip_percent missing. Assume there is no use for such observations because they provide little information regarding the amount of tip given for a trip. Thus, drop them.
trip_lean <- trip_lean[!is.na(trip_lean$tip_percent),]
trip_lean[,!"Ehail_fee"]
trip_lean[, !(colnames(trip_lean) %in% c("Ehail_fee"))]
trip_lean <- trip_lean[, !(colnames(trip_lean) %in% c("Ehail_fee"))]
colnames(trip_lean)
table(trip_lean$RateCodeID)
lm.full <- lm(tip_percent~ Passenger_count + Trip_distance + Fare_amount +
Extra + MTA_tax + Tolls_amount + improvement_surcharge + Total_amount +
Payment_type + Trip_type + hour, data=trip_lean)
trip$percent_predict<-predict(lm.full, newdata = trip_lean)
lm.null <- lm(tip_percent~1, data = trip_lean)
step(lm.null, scope=list(lower=lm.null, upper=lm.full), direction="forward")
lm.m1 <- lm(formula = tip_percent ~ Payment_type + Total_amount + Fare_amount +
Tolls_amount + Extra + improvement_surcharge + Trip_type +
Trip_distance + MTA_tax + hour + Passenger_count, data = trip_lean)
cv.lm(data=trip_lean, form.lm=lm.m1, m=10, plotit=F)
?cv.lm
??cv.lm
DAAG::cv.lm(data=trip_lean, form.lm=lm.m1, m=10, plotit=F)
data <- df[,c("Pickup_longitude","Pickup_latitude")]
data <- trip_lean[,c("Pickup_longitude","Pickup_latitude")]
View(data)
data$Dist <- sqrt((data$Pickup_latitude - 40.8)^2 + (data$Pickup_longitude - -73.9)^2)
data$Pickup_latitude[1]
data$Pickup_longitude
data$Pickup_longitude[1]
data$Pickup_longitude[1]- -73.9
as.numeric(data$Pickup_longitude[1])- -73.9
?order
order(data$Dist)
newdata <- data[order(Dist),]
data
newdata <- data[order(data$Dist),]
View(newdata)
find_k_ride <- function(df, lat, long, k){
# only consider pickup longitude and latitude
data <- df[,c("Pickup_longitude","Pickup_latitude")]
# choose euclidean distance as the distance metric
data$Dist <- sqrt((data$Pickup_latitude - lat)^2 + (data$Pickup_longitude - long)^2)
# sort on euclidean distance
data <- data[order(data$Dist),]
# return the first k records
return(data[1:k,])
}
test <- find_k_ride(trip_lean,40.8,-73.9, 10)
View(test)
View(trip_lean)
trip_lean$time <- as.chron(as.character(trip$lpep_pickup_datetime))
example_time <- as.chron(as.character("09/01/15 00:01:50"))
example_time
example_time <- as.chron("09/01/15 00:01:50")
"09/01/15"
example_time <- as.chron("09/01/1500:01:50")
"09/01/15"
example_time
example_time <- as.chron("09/01/15 00:01:50")
example_time
t <- as.chron("09/01/14 11:56:50")
example_time < t
example_time > t
trip_lean$timestamp <- as.chron(as.character(trip_lean$lpep_pickup_datetime))
t
t - 5
t - "0:5
""
t - "0:5"
t - "00:5"
t
example_time
example_time - t
example_time - 12:05:00
example_time - "12:05:00"
as.chron("12:05:00")
t - "09/01/14 11:56:10"
t-as.chron("09/01/14 11:56:10")
date(as.chron("09/01/15 00:01:50"))
day(as.chron("09/01/15 00:01:50"))
class(t-as.chron("09/01/14 11:56:10"))
t-as.chron("09/01/14 11:56:10")
ti <-t-as.chron("09/01/14 11:56:10")
ti - "4"
ti - "0:0:4"
t-as.chron("09/01/14 11:56:10")
(t-as.chron("09/01/14 11:56:10")) <4
(t-as.chron("09/01/14 11:56:10")) <1
(t-as.chron("09/01/14 11:56:10")) <.1
(t-as.chron("09/01/14 11:56:10")) <50
(t-as.chron("09/01/14 11:56:10")) < .2
(t-as.chron("09/01/14 11:56:10"))
(t-as.chron("09/01/14 11:56:10")) < "00:00"
(t-as.chron("09/01/14 11:56:10")) < "00:00:40"
(t-as.chron("09/01/14 11:56:10")) < "00:00:41"
as.chron(5)
?paste0
duration = 5
paste0("00:0", duration, ":00" )
time_filter <- function(df, time, duration){
data <- df
data <- data[data$timestamp - as.chron(time) < paste0("00:0", duration, ":00" ),]
return(data)
}
test <- time_filter(trip_lean, "09/01/15 00:01:50", 5)
View(test)
test <- time_filter(trip_lean, "09/01/15 00:01:50", 1)
trip_lean$timestamp - as.chron("09/01/15 00:01:50")
class(trip_lean$timestamp)
trip_lean$timestamp - as.chron("09/01/15 00:01:50")
trip_lean$timestamp[1] - as.chron("09/01/15 00:01:50")
trip_lean$timestamp[1]
as.chron("09/01/15 00:01:50")
trip_lean$timestamp - as.chron(as.character("09/01/15 00:01:50"))
trip_lean$timestamp <- as.chron(as.character(trip_lean$lpep_pickup_datetime), format=c('y-m-d','h:m:s'))
trip_lean$timestamp <- as.chron(as.character(trip_lean$lpep_pickup_datetime))
trip_lean$lpep_pickup_datetime[1]
as.chron("2015-09-01 00:01:50")
test <- time_filter(trip_lean, "2015-09-01 00:01:50", 1)
View(test)
test <- time_filter(trip_lean, "2015-09-01 00:01:50", 2)
trip_lean$timestamp - as.chron(as.character("2015-09-01 00:01:50"))
trip_lean$timestamp[1] - as.chron(as.character("2015-09-01 00:01:50"))
trip_lean$timestamp[2] - as.chron(as.character("2015-09-01 00:01:50"))
trip_lean$timestamp[2]
paste0("00:0", duration, ":00" )
trip_lean$timestamp[2]
trip_lean$timestamp[2] - as.chron(as.character("2015-09-01 00:01:50"))
trip_lean$timestamp[2] - as.chron(as.character("2015-09-01 00:01:50")) < paste0("00:0", duration, ":00" )
trip_lean$timestamp[4] - as.chron(as.character("2015-09-01 00:01:50")) < paste0("00:0", duration, ":00" )
trip_lean$timestamp[6] - as.chron(as.character("2015-09-01 00:01:50")) < paste0("00:0", duration, ":00" )
trip_lean$timestamp[6] - as.chron(as.character("2015-09-01 00:01:50"))
trip_lean$timestamp <- as.chron(as.character(trip_lean$lpep_pickup_datetime))
example <- time_filter(trip_lean, "2015-09-01 00:01:50", 2) %>%
find_k_ride(40.8, -73.9, 10)
View(example)
example[,0]
example[0]
find_k_ride <- function(df, lat, long, k){
# only consider pickup longitude and latitude
data <- df
# choose euclidean distance as the distance metric
data$Dist <- sqrt((data$Pickup_latitude - lat)^2 + (data$Pickup_longitude - long)^2)
# sort on euclidean distance
data <- data[order(data$Dist),]
# return the first k records
return(data[1:k,])
}
example <- find_k_ride(trip_lean,40.8,-73.9, 10)
View(example)
example2 <- time_filter(trip_lean, "2015-09-01 00:01:50", 2) %>%
find_k_ride(40.8, -73.9, 10)
View(example2)
time_filter <- function(df, time, duration){
data <- df
time <- as.chron(as.character(time))
duration <- paste0("00:0", duration, ":00" )
data <- data[data$timestamp - time < duration,]
return(data)
}
example2 <- time_filter(trip_lean, "2015-09-01 00:01:50", 2) %>%
find_k_ride(40.8, -73.9, 10)
View(example2)
library(genalg)
install.packages(genalg)
install.packages('genalg')
library(genalg)
library(ggplot2)
## Create dataset to reflect objects, how necessary each object is to survival and
## the weight of each object
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "onions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
View(dataset)
## Set a weight limit for what you can handle carrying in your backpack.
weightlimit <- 20
## For this problem, chromosomes represent which items are to be taken and which
## are to be left behind.  "1" indicates that the object should be packed and
## taken, while "0" indicates that the corresponding object should be left behind.
## Here is an example chromosome:
chromosome = c(1, 0, 0, 1, 1, 0, 0)
## Let's look at what the chromosome represents:
dataset[chromosome == 1, ]
## We can check the sum of the survival points for this particular chromosome:
cat(chromosome %*% dataset$survivalpoints)
## Now, we create an evaluation, or fitness, function.  This function needs to
## maximize the survival points while meeting the imposed weight limit.
## Just as we gave a value to the chromosone configuration above, we will do the same
## with our evaluation function for varying configurations.  Note, the negative of "survival
## points" is used because the genalg algorithm tries to optimize toward the minimum.
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
## Next, the number of iterations is chosen and the model is designed and run.
iter = 100
## To run the model, we give the number of genes in the chromosome (size),  the population
## size, the number of generations or iterations, the mutation rate, whether or not we
## want to use elitism in the model and we indicate the fitness function to be used.
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
## The best solution is found to be [1101111], which means we should take the following
## items on our trip
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
## We can then look at the total number of survival points:
cat(paste(solution %*% dataset$survivalpoints, "/", sum(dataset$survivalpoints)))
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.5,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
## The best solution is found to be [1101111], which means we should take the following
## items on our trip
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
cat(genalg:::summary.rbga(GAmodel))
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.2,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.99,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
## The best solution is found to be [1101111], which means we should take the following
## items on our trip
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
solution == 1
GAmodel <- rbga.bin(size = 7, popSize = 10, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.05,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
## The best solution is found to be [1101111], which means we should take the following
## items on our trip
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
## We can then look at the total number of survival points:
cat(paste(solution %*% dataset$survivalpoints, "/", sum(dataset$survivalpoints)))
## 107 / 117
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
## We can then look at the total number of survival points:
cat(paste(solution %*% dataset$survivalpoints, "/", sum(dataset$survivalpoints)))
## 107 / 117
require(genalg)
evaluate <- function(string=c()) {
returnVal = NA;
if (length(string) == 2) {
returnVal = abs(string[1]-pi) + abs(string[2]-sqrt(50));
} else {
stop("Expecting a chromosome of length 2!");
}
returnVal
}
monitor <- function(obj) {
# plot the population
xlim = c(obj$stringMin[1], obj$stringMax[1]);
ylim = c(obj$stringMin[2], obj$stringMax[2]);
plot(obj$population, xlim=xlim, ylim=ylim,
xlab="pi", ylab="sqrt(50)");
}
rbga.results = rbga(stringMin=c(1, 1), stringMax=c(5, 10), popSize = 200, monitorFunc=monitor,
evalFunc=evaluate, verbose=TRUE, mutationChance=0.01)
plot(rbga.results)
plot(rbga.results, type="hist")
plot(rbga.results, type="vars")
evaluate(1,2)
evaluate(c(1,2))
rbga.results = rbga(stringMin=c(1, 1), stringMax=c(5, 10), popSize = 200,
evalFunc=evaluate, verbose=TRUE, mutationChance=0.01)
plot(rbga.results)
rbga.results = rbga(stringMin=c(1, 1), stringMax=c(5, 10), popSize = 200, monitorFunc=monitor, evalFunc=evaluate, verbose=TRUE, mutationChance=0.01)
rbga.results = rbga(stringMin=c(1, 1), stringMax=c(5, 10), popSize = 200, monitorFunc=monitor, evalFunc=evaluate, verbose=TRUE, mutationChance=0.01)
rbga.results = rbga(stringMin=c(1, 1), stringMax=c(5, 10), popSize = 200, monitorFunc=monitor,
evalFunc=evaluate, verbose=TRUE, mutationChance=0.01)
sqrt(50)
plot(rbga.results)
plot(rbga.results, type="hist")
plot(rbga.results, type="hist")
plot(rbga.results, type="vars")
plot(rbga.results, type="hist")
plot(rbga.results, type="vars")
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "onions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
View(dataset)
dataset <- data.frame(item = c("Chest", "Back", "Shoulders", "Legs",
"Arms", "Calves", "Core", "Cardio"),
time_needed = c(20, 30, 15, 30, 15, 10, 20, 60),
look = c(3,3,3,2,3,1,3,1),
perf = c(1,2,1,3,2,3,2,3),
fatigue = c(3, 3, 3, 3, 2, 2, 1, 1))
View(dataset)
fatiguelimit <- 25
fatiguelimit <- 15
dataset$gainz <-  (look + perf )/dataset$time_needed
dataset$gainz <-  (data$look + data$perf )/dataset$time_needed
(data$look + data$perf)
data$look
dataset$gainz <-  (dataset$look + dataset$perf)/dataset$time_needed
View(dataset)
evalFunc <- function(x) {
current_solution_gainz <- x %*% dataset$gainz
current_solution_fatigue <- x %*% dataset$fatigue
if (current_solution_fatigue > fatiguelimit)
return(0) else return(-current_solution_gainz)
}
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
install.packages('genalg')
install.packages("genalg")
library(genalg)
library(ggplot2)
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
View(dataset)
evalFunc <- function(x) {
current_solution_gainz <- x %*% dataset$gainz
current_solution_fatigue <- x %*% dataset$fatigue
if (current_solution_fatigue > fatiguelimit)
return(0) else return(-current_solution_gainz)
}
# iterate for 100 times
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
chromosome = c(1, 0, 0, 1, 1, 0, 0, 1)
chromosome %*% dataset$gainz
dataset[chromosome == 1, ]
dataset$gainz <-  (dataset$look + dataset$perf)#/dataset$time_needed
View(dataset)
### now I can only workout for maximum of 3 days a week. Each day I can afford a fatigue of 5.
### so total fatigue limit would be 3 * 5 = 15
fatiguelimit <- 15
## chromosome represents which workouts to do for a week.
chromosome = c(1, 0, 0, 1, 1, 0, 0, 1)
dataset[chromosome == 1, ]
chromosome %*% dataset$gainz
evalFunc <- function(x) {
current_solution_gainz <- x %*% dataset$gainz
current_solution_fatigue <- x %*% dataset$fatigue
if (current_solution_fatigue > fatiguelimit)
return(0) else return(-current_solution_gainz)
}
# iterate for 100 times
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
evalfunc(chromosome)
evalFunc(chromosome)
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
dataset$gainz <-  (dataset$look + dataset$perf)/dataset$time_needed
fatiguelimit <- 15
evalFunc <- function(x) {
current_solution_gainz <- x %*% dataset$gainz
current_solution_fatigue <- x %*% dataset$fatigue
if (current_solution_fatigue > fatiguelimit)
return(0) else return(-current_solution_gainz)
}
# iterate for 100 times
iter = 100
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 0, 1, 1, 1, 1, 1, 1)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$gainz, "/", sum(dataset$gainz)))
install.packages('genalg')
install.packages("genalg")
library(genalg)
timelimit <- 30 * 5
dataset <- data.frame(item = c("Bench press", "Deadlift", "Military press", "Squat",
"Bicep curl", "Calf raise", "ab ripper X", "Basketball"),
perf = c(2,2,2,3,1,2,3,3),
hurt = c(1,2,1,2,1,1,1,3),
look = c(3,2,3,1,3,1,3,1),
fatigue = c(2,3,2,3,1,1,2,2),
time_needed = c(30, 30, 20, 30, 20, 15, 30, 60))
View(dataset)
dataset <- data.frame(item = c("Bench press", "Deadlift", "Military press", "Squat",
"Bicep curl", "Calf raise", "ab ripper X", "Basketball"),
perf = c(2,2,2,3,1,2,3,3),
hurt = c(1,2,1,2,1,1,1,3),
look = c(3,2,3,1,3,1,3,1),
fatigue = c(2,3,2,3,1,1,2,2),
time = c(30, 30, 20, 30, 20, 15, 30, 60))
w1 <- 4
w2 <- 3
w3 <- 2
w4 <- 1
dataset$score <-  (w1*dataset$perf + w3*dataset$look)/(w2*dataset$hurt + w4*fatigue)
dataset$score <-  (w1*dataset$perf + w3*dataset$look)/(w2*dataset$hurt + w4*dataset$fatigue)
View(dataset)
evalFunc <- function(x) {
score <- x %*% dataset$score
limit <- x %*% dataset$time
if (limit > timelimit)
return(0) else return(-score)
}
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = 100, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
solution = c(1, 0, 1, 1, 1, 1, 1, 0)
dataset[solution == 1, ]
cat(paste(solution %*% dataset$score, "/", sum(dataset$score)))
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = 100, mutationChance = 0.05,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
GAmodel <- rbga.bin(size = 8, popSize = 200, iters = 100, mutationChance = 0.1,
elitism = T, evalFunc = evalFunc, verbose = TRUE)
cat(genalg:::summary.rbga(GAmodel))
setwd("~/Desktop/17SDataVIzFinalProj/code")
data<- read.csv("data/2011_alpha.csv")
View(data)
grepl("COMPUTER PROGRAMMERS","computer")
grepl("COMPUTER PROGRAMMERS","COMPUTER")
grepl("COMPUTER","COMPUTER")
grepl("COMPUTER","COMPUTERa")
grepl("computer","COMPUTERaa")
?grepl
grepl("computer","COMPUTERaa",ignore.case = T)
grepl("computer",data$SOC_NAME,ignore.case = T)
data$CS_RELATED <- grepl("computer",data$SOC_NAME,ignore.case = T)
data$SOC_NAME = NULL
data$PREVAILING_WAGE=NULL
write.csv(data, "data/2011_beta.csv")
?write.csv
write.csv(data, "data/2011_beta.csv", row.names = F)
data<- read.csv("data/supposedly.csv")
View(data)
data$CS_RELATED <- grepl("computer",data$SOC_NAME,ignore.case = T)
data$SOC_NAME = NULL
dada$X = NULL
data$X = NULL
View(data)
data$SOC_NAME = NULL
data$JOB_TITLE = NULL
min = min(data$PREVAILING_WAGE)
max = max(data$PREVAILING_WAGE)
range <- max(data$PREVAILING_WAGE) - min(data$PREVAILING_WAGE)
increment = range / 10
plot(data$PREVAILING_WAGE)
summary(data$PREVAILING_WAGE)
quantile(data$PREVAILING_WAGE, 0.95)
data[data$PREVAILING_WAGE < quantile(data$PREVAILING_WAGE, 0.95), ]
data<-data[data$PREVAILING_WAGE < quantile(data$PREVAILING_WAGE, 0.95), ]
min = min(data$PREVAILING_WAGE)
max = max(data$PREVAILING_WAGE)
range <- max(data$PREVAILING_WAGE) - min(data$PREVAILING_WAGE)
increment = range / 10
data$BIN <- cut(data$PREVAILING_WAGE, breaks=break_points, labels=break_points[1:10])
break_points = seq.int(min, max, (max-min)/10)
data$BIN <- cut(data$PREVAILING_WAGE, breaks=break_points, labels=break_points[1:10])
data$PREVAILING_WAGE=NULL
write.csv(data, "data/all.csv", row.names = F)
View(data)
data[data$YEAR==2016,]
2016 <- data[data$YEAR==2016,]
2016_data <- data[data$YEAR==2016,]
data_2016 <- data[data$YEAR==2016,]
View(data_2016)
View(data)
all<- read.csv("data/supposedly.csv")
min(all$PREVAILING_WAGE)
data_2016 <- all[all$YEAR==2016,]
min(all$PREVAILING_WAGE)
min(data_2016$PREVAILING_WAGE)
min(all[all$YEAR==2016,]$PREVAILING_WAGE)
min(all[all$YEAR==2015,]$PREVAILING_WAGE)
min(all[all$YEAR==2014,]$PREVAILING_WAGE)
116314.4+increment
